<!DOCTYPE html>
<html lang="en">
<head>
    <title>WebSocket Monitor</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        .message {
            margin: 5px 0;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
        .panel {
            margin-bottom: 20px;
            position: relative;
        }
        .select-button {
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 5px 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        .ordering-button {
            position: absolute;
            top: 10px;
            left: 10px;
            padding: 5px 10px;
            background-color: #ffc107;
            color: black;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        .confirm-button, .back-button {
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        .back-button {
            background-color: #dc3545; /* Red color for the back button */
            display: none; /* Hidden by default */
        }
        .selection-square {
            position: absolute;
            top: 10px;
            left: 10px;
            width: 20px;
            height: 20px;
            border: 2px solid #007bff;
            border-radius: 5px;
            cursor: pointer;
            display: none; /* Hidden by default */
        }
        .selection-square.selected::after {
            content: "âœ”";
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: #007bff;
        }
    </style>
</head>
<body>
<h1>WebSocket Message Monitor</h1>

<!-- Ordering Button -->
<button class="ordering-button" onclick="orderPanelsByNodeId()">Ordering</button>

<!-- Select Button -->
<button class="select-button" onclick="toggleSelectionMode()">Select</button>

<!-- Confirm Button (Initially Hidden) -->
<button class="confirm-button" onclick="confirmSelection()" style="display: none;">Confirm</button>

<!-- Back Button (Initially Hidden) -->
<button class="back-button" onclick="goBackToAllNodes()" style="display: none;">Back</button>

<!-- Message Display -->
<div id="messages"></div>

<script>
    const panelsContainer = document.getElementById("messages"); // Container for all panels
    const panels = {}; // Object to track panels by node_id
    const selectedNodes = new Set(); // Set to track selected nodes
    let isSelectionMode = false; // Flag to track selection mode

    // Create a WebSocket connection to the Rust server
    const wsHost = window.location.hostname;
    const ws = new WebSocket(`ws://${wsHost}:8080`);

    // Function to request data update from the server
    function sendUpdateCommand() {
        if (ws.readyState === WebSocket.OPEN) {
            ws.send(JSON.stringify("WsUpdateData"));
            console.log('Update Command Sent');
        } else {
            console.error('WebSocket is not open. Unable to send update command.');
        }
    }


    // Function to order panels by node_id
    function orderPanelsByNodeId() {
        const panelsArray = Object.values(panels);
        panelsArray.sort((a, b) => {
            const nodeIdA = parseInt(a.dataset.nodeId, 10);
            const nodeIdB = parseInt(b.dataset.nodeId, 10);
            return nodeIdA - nodeIdB;
        });

        // Clear the container and re-append panels in sorted order
        panelsContainer.innerHTML = '';
        panelsArray.forEach(panel => panelsContainer.appendChild(panel));
    }

    // Function to toggle selection mode
    function toggleSelectionMode() {
        isSelectionMode = !isSelectionMode;
        document.querySelector('.confirm-button').style.display = isSelectionMode ? 'block' : 'none';
        document.querySelector('.back-button').style.display = 'none'; // Hide back button in selection mode
        updateSelectionSquaresVisibility();
    }

    // Function to update the visibility of selection squares
    function updateSelectionSquaresVisibility() {
        Object.values(panels).forEach(panel => {
            const square = panel.querySelector('.selection-square');
            if (square) {
                square.style.display = isSelectionMode ? 'block' : 'none';
            }
        });
    }

    // Function to confirm the selection
    function confirmSelection() {
        isSelectionMode = false;
        document.querySelector('.confirm-button').style.display = 'none';
        document.querySelector('.back-button').style.display = 'block'; // Show back button after confirmation
        updateSelectionSquaresVisibility();
        filterPanelsBySelectedNodes();
    }

    // Function to filter panels based on selected nodes
    function filterPanelsBySelectedNodes() {
        Object.values(panels).forEach(panel => {
            const nodeId = panel.dataset.nodeId;
            if (selectedNodes.has(nodeId)) {
                panel.style.display = 'block';
            } else {
                panel.style.display = 'none';
            }
        });
    }

    // Function to go back to monitoring all nodes
    function goBackToAllNodes() {
        selectedNodes.clear(); // Clear selected nodes
        document.querySelector('.back-button').style.display = 'none'; // Hide back button
        document.querySelector('.confirm-button').style.display = 'none'; // Hide confirm button
        Object.values(panels).forEach(panel => {
            panel.style.display = 'block'; // Show all panels
            const square = panel.querySelector('.selection-square');
            if (square) {
                square.classList.remove('selected'); // Remove selection tick
            }
        });
    }

    //WEB SOCKET STUFF

    // Handle WebSocket messages
    ws.onmessage = async (event) => {
        try {
            const text = await event.data;
            const data = JSON.parse(text);

            // Update the DOM based on node_type
            let panel = panels[data.node_id];
            if (!panel) {
                panel = document.createElement("div");
                panel.className = "panel";
                panel.dataset.nodeId = data.node_id;
                // Populate the panel content based on the node_type
                switch (data.node_type) {
                    case "Web Browser":
                        panel.innerHTML = `
                        <div class="selection-square" onclick="toggleNodeSelection('${data.node_id}')"></div>
                        <h2>Node ${data.node_id} (${data.node_type})</h2>
                        <div class="session">Session ID: <span id="session-${data.node_id}">${data.session_id}</span></div>
                        <div class="connected-nodes">Connected Nodes: <span id="connected-nodes-${data.node_id}">${Array.from(data.connected_node_ids).join(', ')}</span></div>
                        <div class="registered-communication-servers">Registered Communication Servers: <pre id="registered-communication-servers-${data.node_id}">${JSON.stringify(data.registered_communication_servers, null, 2)}</pre></div>
                        <div class="registered-content-servers">Registered Content Servers: <pre id="registered-content-servers-${data.node_id}">${JSON.stringify(data.registered_content_servers, null, 2)}</pre></div>
                        <div class="routing-table">Routing Table: <pre id="routing-table-${data.node_id}">${JSON.stringify(data.routing_table, null, 2)}</pre></div>
                        <div class="current-files">Current Files: <pre id="curr-files-${data.node_id}">${JSON.stringify(data.curr_received_file_list, null, 2)}</pre></div>
                        <div class="chosen-file">Chosen File: <span id="chosen-file-${data.node_id}">${data.chosen_file_text}</span></div>
                        <div class="serialized-media">Serialized Media: <pre id="serialized-media-${data.node_id}">${JSON.stringify(data.serialized_media, null, 2)}</pre></div>
                    `;
                        break;
                    case "Chat Client":
                        panel.innerHTML = `
                        <div class="selection-square" onclick="toggleNodeSelection('${data.node_id}')"></div>
                        <h2>Node ${data.node_id} (${data.node_type})</h2>
                        <div class="flood-ids">Flood IDs: <span id="flood-ids-${data.node_id}">${data.flood_ids.join(', ')}</span></div>
                        <div class="session-ids">Session IDs: <span id="session-ids-${data.node_id}">${data.session_ids.join(', ')}</span></div>
                        <div class="neighbours">Neighbours: <span id="neighbours-${data.node_id}">${Array.from(data.neighbours).join(', ')}</span></div>
                        <div class="discovered-servers">Discovered Servers: <pre id="discovered-servers-${data.node_id}">${JSON.stringify(data.discovered_servers, null, 2)}</pre></div>
                        <div class="available-clients">Available Clients: <pre id="available-clients-${data.node_id}">${JSON.stringify(data.available_clients, null, 2)}</pre></div>
                        <div class="received-messages">Received Messages: <pre id="received-messages-${data.node_id}">${JSON.stringify(data.received_messages, null, 2)}</pre></div>
                    `;
                        break;
                    case "Communication Server":
                        panel.innerHTML = `
                        <div class="selection-square" onclick="toggleNodeSelection('${data.node_id}')"></div>
                        <h2>Node ${data.node_id} (${data.node_type})</h2>
                        <div class="flood-id">Flood ID: <span id="flood-id-${data.node_id}">${data.flood_id}</span></div>
                        <div class="connected-nodes">Connected Nodes: <span id="connected-nodes-${data.node_id}">${Array.from(data.connected_node_ids).join(', ')}</span></div>
                        <div class="routing-table">Routing Table: <pre id="routing-table-${data.node_id}">${JSON.stringify(data.routing_table, null, 2)}</pre></div>
                        <div class="registered-clients">Registered Clients: <span id="registered-clients-${data.node_id}">${data.registered_clients.join(', ')}</span></div>
                    `;
                        break;
                    case "Media Server":
                        panel.innerHTML = `
                        <div class="selection-square" onclick="toggleNodeSelection('${data.node_id}')"></div>
                        <h2>Node ${data.node_id} (${data.node_type})</h2>
                        <div class="flood-id">Flood ID: <span id="flood-id-${data.node_id}">${data.flood_id}</span></div>
                        <div class="connected-nodes">Connected Nodes: <span id="connected-nodes-${data.node_id}">${Array.from(data.connected_node_ids).join(', ')}</span></div>
                        <div class="routing-table">Routing Table: <pre id="routing-table-${data.node_id}">${JSON.stringify(data.routing_table, null, 2)}</pre></div>
                        <div class="media">Media: <pre id="media-${data.node_id}">${JSON.stringify(data.media, null, 2)}</pre></div>
                    `;
                        break;
                    case "Text Server":
                        panel.innerHTML = `
                        <div class="selection-square" onclick="toggleNodeSelection('${data.node_id}')"></div>
                        <h2>Node ${data.node_id} (${data.node_type})</h2>
                        <div class="flood-id">Flood ID: <span id="flood-id-${data.node_id}">${data.flood_id}</span></div>
                        <div class="connected-nodes">Connected Nodes: <span id="connected-nodes-${data.node_id}">${Array.from(data.connected_node_ids).join(', ')}</span></div>
                        <div class="routing-table">Routing Table: <pre id="routing-table-${data.node_id}">${JSON.stringify(data.routing_table, null, 2)}</pre></div>
                        <div class="text-files">Text Files: <pre id="text-files-${data.node_id}">${JSON.stringify(data.text_files, null, 2)}</pre></div>
                    `;
                        break;
                    default:
                        panel.innerHTML = `<h2>Node ${data.node_id} (${data.node_type})</h2><div>Unsupported node type</div>`;
                        break;
                }
                panelsContainer.appendChild(panel);
                panels[data.node_id] = panel;
            } else {
                // Update logic for existing panels
                switch (data.node_type) {
                    case "Web Browser":
                        document.getElementById(`session-${data.node_id}`).textContent = data.session_id;
                        document.getElementById(`connected-nodes-${data.node_id}`).textContent = Array.from(data.connected_node_ids).join(', ');
                        document.getElementById(`registered-communication-servers-${data.node_id}`).textContent = JSON.stringify(data.registered_communication_servers, null, 2);
                        document.getElementById(`registered-content-servers-${data.node_id}`).textContent = JSON.stringify(data.registered_content_servers, null, 2);
                        document.getElementById(`routing-table-${data.node_id}`).textContent = JSON.stringify(data.routing_table, null, 2);
                        document.getElementById(`curr-files-${data.node_id}`).textContent = JSON.stringify(data.curr_received_file_list, null, 2);
                        document.getElementById(`chosen-file-${data.node_id}`).textContent = data.chosen_file_text;
                        document.getElementById(`serialized-media-${data.node_id}`).textContent = JSON.stringify(data.serialized_media, null, 2);
                        break;
                    case "Chat Client":
                        document.getElementById(`flood-ids-${data.node_id}`).textContent = data.flood_ids.join(', ');
                        document.getElementById(`session-ids-${data.node_id}`).textContent = data.session_ids.join(', ');
                        document.getElementById(`neighbours-${data.node_id}`).textContent = Array.from(data.neighbours).join(', ');
                        document.getElementById(`discovered-servers-${data.node_id}`).textContent = JSON.stringify(data.discovered_servers, null, 2);
                        document.getElementById(`available-clients-${data.node_id}`).textContent = JSON.stringify(data.available_clients, null, 2);
                        document.getElementById(`received-messages-${data.node_id}`).textContent = JSON.stringify(data.received_messages, null, 2);
                        break;
                    case "Communication Server":
                        document.getElementById(`flood-id-${data.node_id}`).textContent = data.flood_id;
                        document.getElementById(`connected-nodes-${data.node_id}`).textContent = Array.from(data.connected_node_ids).join(', ');
                        document.getElementById(`routing-table-${data.node_id}`).textContent = JSON.stringify(data.routing_table, null, 2);
                        document.getElementById(`registered-clients-${data.node_id}`).textContent = data.registered_clients.join(', ');
                        break;
                    case "Media Server":
                        document.getElementById(`flood-id-${data.node_id}`).textContent = data.flood_id;
                        document.getElementById(`connected-nodes-${data.node_id}`).textContent = Array.from(data.connected_node_ids).join(', ');
                        document.getElementById(`routing-table-${data.node_id}`).textContent = JSON.stringify(data.routing_table, null, 2);
                        document.getElementById(`media-${data.node_id}`).textContent = JSON.stringify(data.media, null, 2);
                        break;
                    case "Text Server":
                        document.getElementById(`flood-id-${data.node_id}`).textContent = data.flood_id;
                        document.getElementById(`connected-nodes-${data.node_id}`).textContent = Array.from(data.connected_node_ids).join(', ');
                        document.getElementById(`routing-table-${data.node_id}`).textContent = JSON.stringify(data.routing_table, null, 2);
                        document.getElementById(`text-files-${data.node_id}`).textContent = JSON.stringify(data.text_files, null, 2);
                        break;
                    default:
                        console.warn(`Unknown node type: ${data.node_type}`);
                        break;
                }
            }
        } catch (e) {
            console.error('Error processing message:', e);
        }
    };


    // Function to toggle node selection
    function toggleNodeSelection(nodeId) {
        if (selectedNodes.has(nodeId)) {
            selectedNodes.delete(nodeId);
        } else {
            selectedNodes.add(nodeId);
        }
        const square = document.querySelector(`.panel[data-node-id="${nodeId}"] .selection-square`);
        square.classList.toggle('selected');
    }

    // Handle WebSocket connection close
    ws.onclose = () => {
        const msgDiv = document.createElement("div");
        msgDiv.className = "message error";
        msgDiv.textContent = 'WebSocket connection closed.';
        panelsContainer.appendChild(msgDiv);
    };

    // Handle WebSocket connection open
    ws.onopen = () => {
        console.log('WebSocket connection established');
        sendUpdateCommand(); // Request initial data on connection
    };
    // Handle page refresh/visibility changes
    window.addEventListener('beforeunload', () => {
        sendUpdateCommand(); // Optional: Send cleanup command if needed
    });

    // Request update when the page becomes visible again
    document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'visible') {
            sendUpdateCommand();
        }
    });

    // Handle WebSocket errors
    ws.onerror = (error) => {
        console.error('WebSocket error:', error);
    };
</script>
</body>
</html>